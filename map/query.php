<?php 

namespace sodas;
use PDO;
use PDOException;
use error_handler\load_errors;

class query extends db{
    
    /*==================================================================================================================
        Variables
    ==================================================================================================================*/

    // Main table name | string
    private $table;

    // Main table alias | string 
    private $alias;
    
    // Column list ready for query string | string | code generated
    private $columns;

    // List of columns maintained throughout run for updating column list string | string
    private $columns_list;

    // Querty string join statment | string
    private $joins_stmt;

    // Execute array join values | array
    private $joins_array;

    // Query string where statement | string
    private $where_stmt;

    // Execute array where values | array
    private $where_array;
    
    // Primary grouping | string
    private $group;
    
    // Primary ordering | string
    private $order;
    
    // Start and limit | string
    private $limit;
    
    // PDO::FETCH type
    private $execute = array();
    
    // PDO fetch mode | command
    private $fetch;
    
    // MySQL results array
    private $results;
    
    // Boolean to return single top row or multiple rows
    private $return_solo;
    
    // Complete query string to be executed | string
    private $query_string;
    
    // PDO query method | object
    private $query;

    // Type of query currently being setup to execute | string
    private $query_type;

    // List of values to be inserted | string
    private $insert_list;

    // Insert values ready to be added to prepared statement | string
    private $insert_sql_string;

    // Last insert id as generated by PDO | int
    private $lastInsertId;

    // Class stored as new class
    private $error_handler;

    // Log class
    private $log;

    /*==================================================================================================================
        Debug vars
    ==================================================================================================================*/

    // Switch to check if debug_me should be checked
    private $debug_mode = false;
    
    // Show current query string instead of executing
    private $show_my_query_string;

    // Stop after debug options have been executed
    private $debug_stop_mode = false;

    // Return string containing all requested debug values
    private $debugged;

    /*==================================================================================================================
        Query Methods
    ==================================================================================================================*/

    function __construct(){
        $this -> db = $this -> connect();
        $this -> db -> setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $this -> error_handler = new load_errors();
        $this -> log = new log();
        $this -> set_fetch(PDO::FETCH_ASSOC);
        $this -> set_return();
    } // __construct()

    function select($table, $alias = null){
        $this -> query_type = "select";
        $this -> alias = $alias;
        return $this -> execute_query($table);
    } // select()

    function insert($table){
        $this -> query_type = "insert";
        return $this -> execute_query($table);
    } // insert()

    function update($table){
        $this -> query_type = "update";
        return $this -> execute_query($table);
    } // update()

    function delete($table){
        $this -> query_type = "delete";
        return $this -> execute_query($table);
    } // delete()

    function custom($query, $params = array()){
        $this -> query_string = $query;
        $this -> execute = $params;
        $this -> query = $this -> db -> prepare($this -> query_string);
        $this -> query -> execute($this -> execute);
        $this -> results = $this -> query -> fetchAll($this -> fetch);
        $this -> lastInsertId = $this -> db -> lastInsertId();
        return $this -> results;
    }

    /*==================================================================================================================
        Query Setup
    ==================================================================================================================*/

    function set_join($table, $ons_array = array(), $alias = null, $type = "INNER"){
        /* on_vals array should be array("u.id = l.user_id", ) */

        // Check / set where-execute-array if not exists
        if(empty($this -> joins_array)) $this -> joins_array = array();
        if(empty($ons_array)) $this -> error_handler -> mk_error("dev", "Function set_join of database/query.php file is missing comparison values. Check use of input function.");
        if(empty($ons)) $ons = "";

        foreach($ons_array as $on){
            $ons .= "{$ons_array[0]}";
            if(!empty($ons_array[1])) array_push($this -> joins_array, $ons_array[1]);
            if(next($ons_array)) $ons .= "AND ";
        }
        // find non-relational on conditions and bind to execute array
        $this -> joins_stmt .= "$type JOIN $table $alias ON $ons ";
        
        return $this;
    } // set_join()

    function set_where($column, $value, $operator = "=", $logical_operator = "AND "){
        
        if(empty($this -> where_stmt)){
            $this -> where_stmt = "WHERE ";
        }else{
            $this -> where_stmt = $this -> where_stmt . "$logical_operator ";
        }

        if(empty($this -> where_array)) $this -> where_array = array();

        $where_factor = "? ";
            
        if(!is_array($value)) $value = explode(",", $value);
        if($operator == "BETWEEN"){
            $where_factor = "? AND ? ";
            array_push($this -> where_array, $value[0], $value[1]);
        }elseif($operator == "IN"){
            $where_factor = "(". join(',', array_fill(0, count($value), '?')) . ")";
            $this -> where_array = array_merge($this -> where_array, $value);
        }else{
            array_push($this -> where_array, $value[0]);
        }

        $this -> where_stmt .= "$column $operator $where_factor";
        
        return $this;
    } // set_where()

    function set_group($column){
        if(empty($this -> group)){
            $this -> group = "GROUP BY ";
        }else{
            $this -> group = "," . $this -> group;
        }
        $this -> group .= $column;
        return $this;
    } // set_group()

    function set_order($column, $order){
        if(empty($this -> order)){
            $this -> order = "ORDER BY ";
        }else{
            $this -> order = "," . $this -> order;
        }
        if(empty($sort = $order)) $sort = "ASC ";
        $this -> order .= "$column $sort ";
        return $this;
    } // set_sort()

    function set_limit($start, $limit){
        $this -> limit = "LIMIT $start, $limit";
        return $this;
    } // set_limit()

    function set_fetch($fetch){
        $this -> fetch = $fetch;
        return $this;
    } // set_fetch()
    
    function set_column($column = null){
        if(empty($column)){
            $this -> columns = "*";
        }else{
            if(!empty($this -> columns)) $this -> columns .= ",";
            $this -> columns .= $column;
        }
        return $this;
    } // set_columns()

    function set_update_column($column, $value=null){
        if(!empty($this -> columns_list)) $this -> columns_list .= ",";
        if(!empty($this -> insert_list)) $this -> insert_list .= ",";
        
        $this -> columns_list .= "$column = ?";

        array_push($this -> execute, $value);
        
        $this -> columns = "({$this -> columns_list})";
        return $this;
    } // set_update_columns()

    function set_insert_column($column, $value=null){
        // INSERT INTO {$this -> table} {$this -> columns} VALUES {$this -> insert_sql_string}
        // $this -> insert_sql_string must be surrounded by parenthases - reset every time something is added to insert_list
        // $this -> insert_list maintains a running list of question marks to represent variables in execute_array
        
        if(!empty($this -> columns_list)) $this -> columns_list .= ",";
        if(!empty($this -> insert_list)) $this -> insert_list .= ",";
        
        $this -> columns_list .= $column;
        $this -> insert_list .= "?";

        array_push($this -> execute, $value);
        
        $this -> columns = "({$this -> columns_list})";
        $this -> insert_sql_string = "({$this -> insert_list})";
        
        return $this;
    } // set_insert_columns()

    function set_alias($alias){
        $this -> alias = $alias;
        return $this;
    } // set_alias()

    function set_return($val = "all"){
        if($val == "all")
            $this -> return_solo = false;
        else
            $this -> return_solo = true;
        return $this;
    } // set_return()

    function dev_debug($type, $stop = true){
        if($stop == true) $this -> debug_stop_mode = true;
        $this -> debug_mode = true;
        
        switch($type){
            case "show_query_string":
            case "SQS": // ShowQueryString
                $this -> show_my_query_string = true;
                break;
        }
    } // dev_debug()

    function get_lastInsertId(){
        return $this -> lastInsertId;
    } // get_lastInsertId()

    /*==================================================================================================================
        Class Control Methods
    ==================================================================================================================*/

    private function execute_query($table){
        // Absolute
        if(empty($this -> table = $table)) $this -> error_handler -> mk_error("dev", "select query has empty table name");
        if(!empty($this -> joins_array)) $this -> execute = array_merge($this -> execute, $this -> joins_array);
        if(!empty($this -> where_array)) $this -> execute = array_merge($this -> execute, $this -> where_array);

        switch($this -> query_type){
            case "select":
                if(empty($this -> columns)) $this -> set_column();
                $this -> query_string = "SELECT {$this -> columns} FROM {$this -> table} {$this -> alias} {$this -> joins_stmt} {$this -> where_stmt} {$this -> group} {$this -> order} {$this -> limit}";
                break;
            case "insert":
                if(empty($this -> columns)) $this -> error_handler -> mk_error("dev", "No values set to insert.");
                $this -> query_string = "INSERT INTO {$this -> table} {$this -> columns} VALUES {$this -> insert_sql_string}";
                break;
            case "update":
                if(empty($this -> columns)) $this -> error_handler -> mk_error("dev", "No values set to update.");
                $this -> query_string = "UPDATE {$this -> table} SET {$this -> columns} {$this -> where_stmt}";
                break;
            case "delete":
                $this -> query_string = "DELETE FROM {$this -> table} {$this -> where_stmt}";
                break;
        }
        

        $this -> query = $this -> db -> prepare($this -> query_string);

        // Run query and capture run time
        $query_start_time = microtime(true);
            try{
                $this -> query -> execute($this -> execute);
            }catch (PDOException $e){
                $this -> log -> set_record("query_error", [
                    "error" => trim($e -> getMessage()),
                    "query_string" => preg_replace(array('/\s{2,}/', '/[\t\n]/'), ' ', $this -> dumpSQLQuery($this -> query_string, $this -> execute))
                ]);
            }
            $query_row_count = $this -> query -> rowCount();
        $query_end_time = microtime(true);
        $query_execute_time = $query_end_time - $query_start_time;
        
        // Query logging
        if(sodas_log_status_query == true){
            $log_data_array = array(
                "table" => $this -> table,
                "result_count" => $query_row_count,
                "run_time" => round($query_execute_time, 5) . "s",
                "query_string" => preg_replace(array('/\s{2,}/', '/[\t\n]/'), ' ', $this -> dumpSQLQuery($this -> query_string, $this -> execute))
            );
            $this -> log -> set_record("query", $log_data_array);
        }
        
        if($this -> query_type == "select"){
            if($this -> return_solo == true){
                $this -> results = $this -> query -> fetch($this -> fetch);
            }else{
                $this -> results = $this -> query -> fetchAll($this -> fetch);
            }
        }elseif($this -> query_type == "insert"){
            $this -> results = array(
                "status" => 1,
                "last_insert_id" => $this -> db -> lastInsertId()
            );
            $this -> lastInsertId = $this -> db -> lastInsertId();
        }else{ // query_type == delete or update
            $this -> results = array("status"=>1);
        }
        
        // Dev debugging
        if($this -> debug_mode == true) $this -> debug_me();

        return $this -> results;
    } // execute_query()

    /*==================================================================================================================
        Debugging
    ==================================================================================================================*/

    private function debug_me(){
        if($this -> show_my_query_string == true) $this -> debugged .= "<b>Final Query String: <i>" . $this -> final_query . "</i></b><br>";
        echo $this -> debugged;
        //if($this -> debug_stop_mode == true) exit();
    } // debug_me()


    private function dumpSQLQuery($string,$data) {
        $indexed=$data==array_values($data);
        foreach($data as $k=>$v) {
            if(is_string($v)) $v="'$v'";
            if($indexed) $string=preg_replace('/\?/',$v,$string,1);
            else $string=str_replace(":$k",$v,$string);
        }
        return $string;
    }
} // class query
?>